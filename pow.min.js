/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /gh/41Baloo/balooPow@main/balooPow.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
class POW{constructor(n,t,e,r=!0){this.workers=[],this.challenge=e,this.difficulty=t,this.publicSalt=n,this.navigatorData=this.cloneObject(navigator,0),this.numeric=r,this.workerScript='\n        importScripts(\'https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js\');\n\n        self.onmessage = function(e) {\n            function compareObj(obj1, obj2, iteration) {\n                if (iteration > 4) {\n                    return "";\n                }\n                for (let key in obj1) {\n                    if (key == "rtt") {\n                        return "";\n                    }\n                    if (typeof obj1[key] === "function") {\n                        return "";\n                    }\n                    if (typeof obj1[key] === "object" && obj1[key] !== null) {\n                        return compareObj(obj1[key], obj2[key], iteration + 1)\n                    } else {\n                        if (obj1[key] !== obj2[key]) {\n                            return key+", ";\n                        }\n                    }\n                }\n                return "";\n            }\n\n            function incrementHexString(str) {\n                const chars = \'0123456789abcdef\';\n                let carry = 1;\n                let res = \'\';\n                for (let i = str.length - 1; i >= 0; i--) {\n                    let index = chars.indexOf(str[i]) + carry;\n                    if (index >= chars.length) {\n                        index = 0;\n                        carry = 1;\n                    } else {\n                        carry = 0;\n                    }\n                    res = chars[index] + res;\n                }\n                return carry ? \'0\' + res : res;\n            }\n\n            function getStringByIndex(index, length) {\n                const chars = \'0123456789abcdef\';\n                let res = \'\';\n                for (let i = 0; i < length; i++) {\n                    res = chars[index % chars.length] + res;\n                    index = Math.floor(index / chars.length);\n                }\n                return res.padStart(length, \'0\');\n            }\n\n            const {\n                publicSalt,\n                challenge,\n                start,\n                end,\n                numeric,\n                difficulty,\n                clientNavigator\n            } = e.data;\n            let resp = {\n                match: compareObj(navigator, clientNavigator, 0),\n                solution: "",\n                access: ""\n            };\n\n            if (numeric) {\n                for (let i = start; i <= end; i++) {\n                    if (CryptoJS.SHA256(publicSalt + i).toString() === challenge) {\n                        resp.solution = i;\n                        resp.access = CryptoJS.SHA256(i.toString() + publicSalt).toString();\n                        self.postMessage(resp);\n                        self.close();\n                        return;\n                    }\n                }\n            } else {\n                for (let i = start; i <= end; i++) {\n                    let current = getStringByIndex(i, difficulty);\n                    if (CryptoJS.SHA256(publicSalt + current).toString() === challenge) {\n                        resp.solution = current;\n                        resp.access = CryptoJS.SHA256(current + publicSalt).toString();\n                        self.postMessage(resp);\n                        self.close();\n                        return;\n                    }\n                }\n            }\n\n            self.postMessage(resp);\n            self.close();\n        };\n        '}cloneObject(n,t){var e={};if(t>4)return e;for(var r in n)"object"!=typeof n[r]||null==n[r]||n[r]instanceof Function?"function"==typeof n[r]||n[r]instanceof HTMLElement||(e[r]=n[r]):e[r]=this.cloneObject(n[r],t+1);return e}spawnWorker(n,t,e,r,i){const o=new Worker(n);this.workers.push(o),o.onmessage=n=>{const t=n.data;""!=t.match&&null==navigator.brave||""===t.solution?(console.log("‚ùå This worker didn't find a solution. Match: ",t.match),i("No solution found")):(console.log("üíÄ Solution found, terminating all workers"),this.workers.forEach((n=>{n.terminate()})),r(t))},o.postMessage({challenge:this.challenge,publicSalt:this.publicSalt,start:t,end:e,numeric:this.numeric,difficulty:this.difficulty,clientNavigator:this.navigatorData})}async Solve(){let n=navigator.hardwareConcurrency||2;n=Math.min(n,16),console.log(`ü§î Starting solve with ${n} workers`);const t=this.numeric?Math.ceil(this.difficulty/n):Math.ceil(Math.pow(16,this.difficulty)/n),e=[],r=new Blob([this.workerScript],{type:"text/javascript"}),i=URL.createObjectURL(r);for(let n=0;n<(this.numeric?this.difficulty:Math.pow(16,this.difficulty));n+=t)e.push(new Promise(((e,r)=>{this.spawnWorker(i,n,Math.min(n+t-1,this.numeric?this.difficulty-1:Math.pow(16,this.difficulty)-1),e,r)})));try{const n=new Date,t=await Promise.any(e),r=new Date;return console.log("ü•≥ Heureka",t),console.log("Solved In:",(r.getTime()-n.getTime())/1e3),t}catch(n){return console.log("üïµÔ∏è Something's wrong",n),null}}}
//# sourceMappingURL=/sm/7492cbcd1e027c403af24e882cc9bbc065e2376a8cc01164164038f7555e5867.map
